//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameContext {

    public GameEntity runRewardEntity { get { return GetGroup(GameMatcher.RunReward).GetSingleEntity(); } }
    public RunReward runReward { get { return runRewardEntity.runReward; } }
    public bool hasRunReward { get { return runRewardEntity != null; } }

    public GameEntity SetRunReward(Reward[] newRewards) {
        if (hasRunReward) {
            throw new Entitas.EntitasException("Could not set RunReward!\n" + this + " already has an entity with RunReward!",
                "You should check if the context already has a runRewardEntity before setting it or use context.ReplaceRunReward().");
        }
        var entity = CreateEntity();
        entity.AddRunReward(newRewards);
        return entity;
    }

    public void ReplaceRunReward(Reward[] newRewards) {
        var entity = runRewardEntity;
        if (entity == null) {
            entity = SetRunReward(newRewards);
        } else {
            entity.ReplaceRunReward(newRewards);
        }
    }

    public void RemoveRunReward() {
        runRewardEntity.Destroy();
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public RunReward runReward { get { return (RunReward)GetComponent(GameComponentsLookup.RunReward); } }
    public bool hasRunReward { get { return HasComponent(GameComponentsLookup.RunReward); } }

    public void AddRunReward(Reward[] newRewards) {
        var index = GameComponentsLookup.RunReward;
        var component = (RunReward)CreateComponent(index, typeof(RunReward));
        component.rewards = newRewards;
        AddComponent(index, component);
    }

    public void ReplaceRunReward(Reward[] newRewards) {
        var index = GameComponentsLookup.RunReward;
        var component = (RunReward)CreateComponent(index, typeof(RunReward));
        component.rewards = newRewards;
        ReplaceComponent(index, component);
    }

    public void RemoveRunReward() {
        RemoveComponent(GameComponentsLookup.RunReward);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherRunReward;

    public static Entitas.IMatcher<GameEntity> RunReward {
        get {
            if (_matcherRunReward == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.RunReward);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherRunReward = matcher;
            }

            return _matcherRunReward;
        }
    }
}
