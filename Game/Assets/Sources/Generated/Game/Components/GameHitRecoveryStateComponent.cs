//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public HitRecoveryState hitRecoveryState { get { return (HitRecoveryState)GetComponent(GameComponentsLookup.HitRecoveryState); } }
    public bool hasHitRecoveryState { get { return HasComponent(GameComponentsLookup.HitRecoveryState); } }

    public void AddHitRecoveryState(int newTargetLane, float newCollisionTime) {
        var index = GameComponentsLookup.HitRecoveryState;
        var component = (HitRecoveryState)CreateComponent(index, typeof(HitRecoveryState));
        component.targetLane = newTargetLane;
        component.collisionTime = newCollisionTime;
        AddComponent(index, component);
    }

    public void ReplaceHitRecoveryState(int newTargetLane, float newCollisionTime) {
        var index = GameComponentsLookup.HitRecoveryState;
        var component = (HitRecoveryState)CreateComponent(index, typeof(HitRecoveryState));
        component.targetLane = newTargetLane;
        component.collisionTime = newCollisionTime;
        ReplaceComponent(index, component);
    }

    public void RemoveHitRecoveryState() {
        RemoveComponent(GameComponentsLookup.HitRecoveryState);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherHitRecoveryState;

    public static Entitas.IMatcher<GameEntity> HitRecoveryState {
        get {
            if (_matcherHitRecoveryState == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.HitRecoveryState);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherHitRecoveryState = matcher;
            }

            return _matcherHitRecoveryState;
        }
    }
}
